name: Build geoip files
on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'
  push:
    branches:
      - master
    paths-ignore:
      - ".gitignore"
      - "config-example.json"
      - "LICENSE"
      - "README.md"
      - ".github/dependabot.yml"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x.y
        uses: actions/setup-go@v3
        with:
          go-version: ^1.18

      - name: Set variables
        run: |
          echo "TAG_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        shell: bash

      - name: Checkout codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependency
        run: |
          sudo -E apt-get update -y
          sudo -E apt-get install -y aggregate
          
      - name: Fetch lists from ripe.net
        run: |
          chmod +x asn.sh
          ./asn.sh

      - name: Append more CIDRs
        run: |
          curl -sSL https://www.cloudflare.com/ips-v4 | grep "/" >> data/cloudflare
          curl -sSL https://www.cloudflare.com/ips-v6 | grep "/" >> data/cloudflare
          curl -sSL https://api.fastly.com/public-ip-list | jq --raw-output '.addresses[],.ipv6_addresses[]' >> data/fastly
          curl -sSL https://ip-ranges.amazonaws.com/ip-ranges.json | jq --raw-output '.prefixes[],.ipv6_prefixes[] | select(.service == "CLOUDFRONT") | .ip_prefix,.ipv6_prefix' | grep "/" >> data/cloudfront

      - name: Get GeoLite2
        env:
          LICENSE_KEY: ${{ secrets.MAXMIND_GEOLITE2_LICENSE }}
        run: |
          curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o GeoLite2-Country-CSV.zip
          unzip GeoLite2-Country-CSV.zip
          rm -f GeoLite2-Country-CSV.zip
          mv GeoLite2* geolite2

      - name: Build geoip files
        run: |
          go run ./

      - name: Verify mmdb files
        run: |
          cd ./output/maxmind || exit 1
          go install -v github.com/maxmind/mmdbverify@latest
          for name in $(ls *.mmdb); do
            $(go env GOPATH)/bin/mmdbverify -file ${name}
          done

      - name: Download GeoLite2
        env:
          LICENSE_KEY: ${{ secrets.MAXMIND_GEOLITE2_LICENSE }}
        run: |
          curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=${LICENSE_KEY}&suffix=tar.gz" -o ./output/GeoLite2-ASN.tar.gz
          curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o ./output/GeoLite2-ASN-CSV.zip
          curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${LICENSE_KEY}&suffix=tar.gz" -o ./output/GeoLite2-Country.tar.gz
          curl -L "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country-CSV&license_key=${LICENSE_KEY}&suffix=zip" -o ./output/GeoLite2-Country-CSV.zip

      - name: Move files to publish directory
        run: |
          mkdir -p publish
          mv ./output/*.* ./publish/
          mv ./output/clash/ipcidr/cn.txt ./publish/clash-rule-provider.yml
          mv ./output/clash/classical/cn.txt ./publish/clash-ruleset.list
          mv ./output/surge/cn.txt ./publish/surge-ruleset.list
          cat ./output/text/cn.txt ./output/text/private.txt | aggregate -q > ./publish/geoip-only-cn-private.txt
          mv ./output/text/cn.txt ./publish/geoip-only-cn.txt
          mv ./output/text/cloudflare.txt ./publish/cloudflare.rsc

      - name: Generate RouterOS script
        run: |
          cd ./publish || exit 1
          sed -e 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}\/[0-9]\{1,2\}/add address=& list=CN/g' ./geoip-only-cn-private.txt > ./geoip-only-cn-private.rsc
          sed -i '1 i/log info "Loading CN ipv4 address list"' ./geoip-only-cn-private.rsc
          sed -i '2 i/ip firewall address-list remove [/ip firewall address-list find list=CN]' ./geoip-only-cn-private.rsc
          sed -i '3 i/ip firewall address-list' ./geoip-only-cn-private.rsc

          sed -i 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}\/[0-9]\{1,2\}/add action=lookup comment=Cloudflare disabled=no dst-address=& table=to_CU/g' ./cloudflare.rsc
          sed -i '1 i/log info "Loading Cloudflare ipv4 routing rules"' ./cloudflare.rsc
          sed -i '2 i/routing rule remove [/routing rule find comment=Cloudflare]' ./cloudflare.rsc
          sed -i '3 i/routing rule' ./cloudflare.rsc


      - name: Generate sha256 checksum for publish files
        run: |
          cd ./publish || exit 1
          for name in $(ls *.* | grep -v sha256sum); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      - name: Git push assets to "release" branch
        run: |
          cd publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add -A
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add geoip "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u geoip release

      - name: Purge jsdelivr CDN
        run: |
          cd publish || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

      - name: Remove some files to avoid publishing to GitHub release
        run: rm -rf ./publish/*.{gz,zip} ./publish/*.{gz,zip}.sha256sum ./publish/text

      - name: Upload files to GitHub release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ./publish/*
          tag: ${{ env.TAG_NAME }}

      - name: Delete older releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
